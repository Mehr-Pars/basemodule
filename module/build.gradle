apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'maven'

def libraryGroupId = project.libraryGroup
def libraryArtifactId = project.libraryName
def libraryVersion = project.versionName

android {
    signingConfigs {
        release {
            keyAlias 'epeyk mobile'
            keyPassword 'epeyk2014'
            storeFile file('C:/key.android')
            storePassword 'epeyk2014'
        }
    }

    compileSdkVersion project.compileSdkVersion.toInteger()
    defaultConfig {
        minSdkVersion project.minSdkVersion.toInteger()
        targetSdkVersion project.targetSdkVersion.toInteger()
        versionCode project.versionCode.toInteger()
        versionName project.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.release
        vectorDrawables.useSupportLibrary = true
        dataBinding.enabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


    // Multidex
    api 'com.android.support:multidex:1.0.3'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.1'

    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    api 'androidx.core:core-ktx:1.2.0'
    // Architecture Component
//    implementation 'android.arch.lifecycle:extensions:1.1.1'
    api 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.0.0'
    api 'androidx.lifecycle:lifecycle-extensions:2.0.0'
//    kapt 'android.arch.lifecycle:compiler:1.1.1'
//    api 'android.arch.persistence.room:runtime:1.1.1'
//    kapt 'android.arch.persistence.room:compiler:1.1.1'
//    api 'android.arch.persistence.room:rxjava2:1.1.1'

//    // Network
    api 'com.squareup.retrofit2:retrofit:2.6.1'
    api 'com.squareup.retrofit2:converter-gson:2.6.1'
    api 'com.squareup.okhttp3:logging-interceptor:3.12.2'

    // Rx
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api 'io.reactivex.rxjava2:rxjava:2.2.11'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.6.1'

    // check network
    implementation 'com.github.pwittchen:reactivenetwork-rx2:3.0.6'

    //imageLoader
    api 'com.github.bumptech.glide:glide:4.9.0'
    kapt 'com.github.bumptech.glide:compiler:4.9.0'

    //view
    api 'com.google.android.material:material:1.0.0'

    //dataBinding
    kapt 'com.android.databinding:compiler:3.2.0-alpha10'
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId
            artifact("$buildDir/outputs/aar/module-release.aar")

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                // for dependencies and exclusions
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dp.group)
                    dependencyNode.appendNode('artifactId', dp.name)
                    dependencyNode.appendNode('version', dp.version)

                    // for exclusions
                    if (dp.excludeRules.size() > 0) {
                        def exclusions = dependencyNode.appendNode('exclusions')
                        dp.excludeRules.each { ExcludeRule ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('groupId', ex.group)
                            exclusion.appendNode('artifactId', ex.module)
                        }
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'http://maven.worthnet.ir:8081/artifactory'
    publish {
        repository {
            repoKey = 'libs-release-local'

            username = artifactory_username
            password = artifactory_password
        }
        defaults {
            publications('aar')
            publishArtifacts = true

            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
            publishPom = true
        }
    }
}

task generateSources {
    doFirst {
        def script = "kotlinc.bat _generator_helper.kt -include-runtime -d _generator.jar".execute()
        script.in.eachLine { line -> println line }
        script.err.eachLine { line -> println "ERROR: " + line }
        script.waitFor()
    }
    doLast {
        def script = "java -jar _generator.jar".execute()
        script.in.eachLine { line -> println line }
        script.err.eachLine { line -> println "ERROR: " + line }
        script.waitFor()

        "rm _generator.jar".execute()
    }
}

task assembleAndPublish {
    doFirst {
        def script = "gradlew.bat assembleRelease artifactoryPublish".execute()
        script.in.eachLine { line -> println line }
        script.err.eachLine { line -> println "ERROR: " + line }
        script.waitFor()
    }
}
assembleAndPublish.dependsOn generateSources