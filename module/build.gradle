apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'maven'

def libraryGroupId = project.libraryGroup
def libraryArtifactId = project.libraryName
def libraryVersion = project.versionName

android {
    signingConfigs {
        release {
            storeFile file('C:\\mehrpars.jks')
            storePassword 'mehrpars2019'
            keyAlias = 'Mehr Pars'
            keyPassword 'mehrpars2019'
        }
    }

    compileSdkVersion project.compileSdkVersion.toInteger()
    defaultConfig {
        minSdkVersion project.minSdkVersion.toInteger()
        targetSdkVersion project.targetSdkVersion.toInteger()
        versionCode project.versionCode.toInteger()
        versionName project.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.release
        vectorDrawables.useSupportLibrary = true
        dataBinding.enabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$testEspresso"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    api "androidx.appcompat:appcompat:$supportVersion"
    implementation "androidx.core:core-ktx:$coreVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion"
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId
            artifact("$buildDir/outputs/aar/module-release.aar")

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                // for dependencies and exclusions
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dp.group)
                    dependencyNode.appendNode('artifactId', dp.name)
                    dependencyNode.appendNode('version', dp.version)

                    // for exclusions
                    if (dp.excludeRules.size() > 0) {
                        def exclusions = dependencyNode.appendNode('exclusions')
                        dp.excludeRules.each { ExcludeRule ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('groupId', ex.group)
                            exclusion.appendNode('artifactId', ex.module)
                        }
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'http://maven2.mpars.ir/artifactory'
    publish {
        repository {
            repoKey = 'libs-release-local'

            username = mpars_artifactory_username
            password = mpars_artifactory_password
        }
        defaults {
            publications('aar')
            publishArtifacts = true

            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
            publishPom = true
        }
    }
}

task generateSources {
    doFirst {
        def script = "kotlinc.bat _generator_helper.kt -include-runtime -d _generator.jar".execute()
        script.in.eachLine { line -> println line }
        script.err.eachLine { line -> println "ERROR: " + line }
        script.waitFor()
    }
    doLast {
        def script = "java -jar _generator.jar".execute()
        script.in.eachLine { line -> println line }
        script.err.eachLine { line -> println "ERROR: " + line }
        script.waitFor()

        "rm _generator.jar".execute()
    }
}

task assembleModule {
    doFirst {
        def script = "gradlew.bat assemble".execute()
        script.in.eachLine { line -> println line }
        script.err.eachLine { line -> println "ERROR: " + line }
        script.waitFor()
    }
}

task publishModule {
    doFirst {
        def script = "gradlew.bat artifactoryPublish".execute()
        script.in.eachLine { line -> println line }
        script.err.eachLine { line -> println "ERROR: " + line }
        script.waitFor()
    }
}

assembleModule.dependsOn generateSources
publishModule.dependsOn assembleModule